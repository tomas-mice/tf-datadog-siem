name: 'Get Removed Rules'
# on:
#   push:
#     branches:
#     - main
#   pull_request:
    


on:
  schedule:
    - cron: "15 15 * * *" #runs at 00:00 UTC everyday

permissions: write-all

jobs:
  build:
    name: "Python"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.15 #install the python needed
    - name: Set Repo Path ENV
      run: |
        echo "REPO_DIR=$(pwd)" >> $GITHUB_ENV
    - name: Install requirements
      run: |
        cd original-rule-cloner/
        python3 -m venv .venv
        source .venv/bin/activate
        pip3 install --upgrade pip
        pip3 install -r requirements.txt

    - uses: jannekem/run-python-script-action@v1
      id: py-script
      with:
        script: |
          import subprocess
          import os
          os.chdir('${{ env.REPO_DIR }}')
          script_output = subprocess.run("original-rule-cloner/.venv/bin/python3 ./original-rule-cloner/default-rules-diff.py", shell=True, capture_output=True)
          output = script_output.stdout.splitlines()[-1].decode("utf-8")
          if output.__ne__("NOT_FOUND"):
            set_env("REMOVED_RULES_IDS", output)
            set_env("RULES_FOUND", "True")
      env:
        DD_API_KEY: ${{ secrets.DATADOG_API_KEY }} # if run.py requires passwords..etc, set it as secrets
        DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
    - name: print
      run: |
        echo "=================="
        echo ${{ env.REMOVED_RULES_IDS }}
        echo ${{ env.RULES_FOUND }}
        echo "=================="
    # - name: Removed rules from Datadog
    #   id: ps-script
    #   run: |
    #     source original-rule-cloner/.venv/bin/activate
    #     script_output=$(python original-rule-cloner/default-rules-diff.py)
    #     output=(${script_output//;/ })
    #     echo "REMOVED_RULES_IDS=${output[${#output[@]}-1]}" >> $GITHUB_ENV
    #   env:
    #     DD_API_KEY: ${{ secrets.DATADOG_API_KEY }} # if run.py requires passwords..etc, set it as secrets
    #     DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
    # - name: Get current date
    #   run: |
    #     echo "DATE_TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
    #     echo "REMOVED RULES"
    #     echo ${{ env.REMOVED_RULES_IDS}}
    - name: Current date
      run: echo $DATE_TODAY

    - name: Create Pull Request
      if: ${{ env.RULES_FOUND }} == 'True'
      uses: peter-evans/create-pull-request@v4
      with:
        commit-message: "Removed rules from TF files that are no longer present in Datadog"
        branch: changes-${{ env.DATE_TODAY }}
        delete-branch: true
        title: 'Rules removed [${{ env.REMOVED_RULES_IDS }}]'
        assignees: vytas-maciulskis
        reviewers: karolis-eigelis
        base: $GITHUB_REF
        body: |
          Some rules got removed from Datadog hence removing them from TF configuration.
          They were already removed from Terraform state (terraform state rm)
          Rules: [${{ env.REMOVED_RULES_IDS }}]
          Please, make sure that cloned rules are still relevant and if not, remove them.





  # terraform:
  #   name: 'Terraform'
  #   runs-on: ubuntu-latest
  #   environment: production

  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v1

  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-region: eu-west-2
  #       role-to-assume: arn:aws:iam::717871035839:role/tbol-gh-action-role-tf-datadog-siem
  #       role-duration-seconds: 3500
  #       role-skip-session-tagging: true
  #       role-session-name: githubDataDogPipeline

  #   - name: Terraform Format
  #     id: fmt
  #     run: terraform fmt -check -recursive

  #   - name: Terraform Init
  #     id: init
  #     run: terraform init -input=false 
  #     env:
  #       DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  #       DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}

  #   - name: Terraform Validate
  #     id: validate
  #     run: terraform validate -no-color

  #   - name: Terraform Plan
  #     id: plan
  #     if: github.event_name == 'pull_request'
  #     run: terraform plan -input=false -no-color
  #     env:
  #       DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  #       DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
  #     continue-on-error: true

  #   - name: Format plan
  #     id: format-plan
  #     run: |
  #       plan=$(cat <<'EOF'
  #       ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
  #       EOF
  #       )
  #       echo "PLAN<<EOF" >> $GITHUB_ENV
  #       echo "${plan:0:65536}" >> $GITHUB_ENV
  #       echo "EOF" >> $GITHUB_ENV
  #   - uses: actions/github-script@v6
  #     if: github.event_name == 'pull_request'
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       script: |
  #         const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #         #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #         #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #         #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  #         <details><summary>Show Plan</summary>
  #         \`\`\`\n
  #         ${process.env.PLAN}
  #         \`\`\`
  #         </details>
  #         *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  #         github.rest.issues.createComment({
  #           issue_number: context.issue.number,
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           body: output
  #         })
  #   - name: Terraform Plan Status
  #     if: steps.plan.outcome == 'failure'
  #     run: exit 1

  #   - name: Terraform Apply
  #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #     run: terraform apply -auto-approve -input=false
  #     env:
  #       DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  #       DD_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
